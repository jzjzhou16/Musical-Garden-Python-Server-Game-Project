from .imports import *
from typing import TYPE_CHECKING
from .commands import pickUpShovelCommand, happybirthdayCommand, twinkleCommand, jingleBellsCommand

if TYPE_CHECKING:
    from tiles.map_objects import *

class Shovel(ExtDecor):
    """
    
    A shovel object that players can pick up and carry to delete plants on the garden grid
    
    Parameters:
        image (str): String representing the shovel's appearance

    Invariants:
        - image must be a non-empty string and remain constant after initialization
        - The shovel's state must be set to ("carrying_shovel") on interaction 
    """

    def __init__(self, image: str) -> None:
        """
        Initializes shovel/individual delete button 

        Preconditions:
            - image is a non-empty string  
        
        Parameters:
            image (str): shovel's image asset

        """

        #preconditions
        assert isinstance(image, str) and len(image) > 0, "Image must be a non-empty string"

        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Handles player interaction (pickup) and triggers shovel-carrying state

        Preconditions:
            - player is a HumanPlayer instance with get_current_room()
        
        Parameters:
            player (HumanPlayer): Player interacting with the shovel
            
        Returns:
            list[Message]: Messages generated by the pickup command execution

        """

        # preconditions
        # Shouldn't need assertion because player can't be none and has get_current_room() implemented

        player.set_state('carrying_shovel', self.__image)
        command = pickUpShovelCommand()
        result = command.execute("pickup_shovel", player.get_current_room(), player, self.__image)

        return result

class PlayButton1(ExtDecor):
    """
    A play button that triggers the Happy Birthday Demo when interacted with

    Invariants:
        - image is a non-empty string 
    """

    def __init__(self, image: str) -> None:
        """
        Initializes first play button for demo room (plays happy birthday)

        Preconditions:
            - image is a non-empty string
        
        Parameters:
            image (str): button's image asset

        """

        #preconditions
        assert isinstance(image, str) and len(image) > 0, "Image path must be valid."

        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Triggers the happy birthday song  

        Preconditions:
            - player is a HumanPlayer
        
        Parameters:
            player (HumanPlayer): Player interacting with the button.
            
        Returns:
            list[Message]: Messages generated by the song command execution.
        """
        # Precondtions
        # Shouldn't need assertion because player can't be none and has get_current_room() defined

        command = happybirthdayCommand()
        return command.execute("happy_birthday", player.get_current_room(), player)

class PlayButton2(ExtDecor):
    """
    Twinkle Twinkle Little Star Play button. Follows same contracts as the PlayButton1 class above
    """
    def __init__(self, image: str) -> None:
        """
        Initializes second play button for demo room (plays twinkle twinkle little star)
        
        Parameters:
            image (str): button's image asset
        """
        
        #preconditions
        assert isinstance(image, str) and len(image) > 0, "Image path must be valid."

        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Triggers the Twinkle Twinkle Little Star song  
        
        Preconditions:
            - player is a HumanPlayer instance with get_current_room() 
        
        Parameters:
            player (HumanPlayer): Player interacting with the button.
            
        Returns:
            list[Message]: Messages generated by the song command execution.
        """

        #preconditions
        # Shouldn't need assertion because player can't be none and has get_current_room() defined

        command = twinkleCommand()
        return command.execute("twinkle", player.get_current_room(), player)
    
class PlayButton3(ExtDecor):
    """
    Jingle Bells Play button. Follows same contracts as the PlayButton1 and PlayButton2 classes above
    """
    def __init__(self, image: str) -> None:
        """
        Initializes third play button for demo room (plays jingle bells)
        
        Parameters:
            image (str): button's image asset
        """

        #preconditions
        assert isinstance(image, str) and len(image) > 0, "Image path must be valid."

        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Triggers the Jingle Bells song  
        
        Preconditions:
            - player is a HumanPlayer instance with get_current_room() 
        
        Parameters:
            player (HumanPlayer): Player interacting with the button.
            
        Returns:
            list[Message]: Messages generated by the song command execution.
        """

        #preconditions
        # Shouldn't need assertion because player can't be none and has get_current_room() defined

        command = jingleBellsCommand()
        return command.execute("jingle_bells", player.get_current_room(), player)