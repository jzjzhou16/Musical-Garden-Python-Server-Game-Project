from .imports import *
from typing import TYPE_CHECKING
from .commands import pickUpShovelCommand, happybirthdayCommand, twinkleCommand, jingleBellsCommand

if TYPE_CHECKING:
    from tiles.map_objects import *

class Shovel(ExtDecor):
    """
    
    A shovel object that players can pick up and carry to delete plants on the garden grid
    
    Parameters:
        __image (str): String representing the shovel's appearance
    """

    def __init__(self, image: str) -> None:
        """
        Initializes shovel/individual delete button 
        
        Parameters:
            image (str): shovel's image asset
        """
        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Handles player interaction (pickup) and triggers shovel-carrying state
        
        Parameters:
            player (HumanPlayer): Player interacting with the shovel
            
        Returns:
            list[Message]: Messages generated by the pickup command execution
        """

        player.set_state('carrying_shovel', self.__image)
        command = pickUpShovelCommand()
        return command.execute("pickup_shovel", player, self.__image)

class PlayButton1(ExtDecor):
    def __init__(self, image: str) -> None:
        """
        Initializes first play button for demo room (plays happy birthday)
        
        Parameters:
            image (str): button's image asset
        """
        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Triggers the happy birthday song  
        
        Parameters:
            player (HumanPlayer): Player interacting with the button.
            
        Returns:
            list[Message]: Messages generated by the song command execution.
        """
        command = happybirthdayCommand()
        return command.execute("happy_birthday", player.get_current_room(), player)

class PlayButton2(ExtDecor):
    def __init__(self, image: str) -> None:
        """
        Initializes second play button for demo room (plays twinkle twinkle little star)
        
        Parameters:
            image (str): button's image asset
        """
        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Triggers the Twinkle Twinkle Little Star song  
        
        Parameters:
            player (HumanPlayer): Player interacting with the button.
            
        Returns:
            list[Message]: Messages generated by the song command execution.
        """
        command = twinkleCommand()
        return command.execute("twinkle", player.get_current_room(), player)
    
class PlayButton3(ExtDecor):
    def __init__(self, image: str) -> None:
        """
        Initializes third play button for demo room (plays jingle bells)
        
        Parameters:
            image (str): button's image asset
        """
        super().__init__(image)
        self.__image = image

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Triggers the Jingle Bells song  
        
        Parameters:
            player (HumanPlayer): Player interacting with the button.
            
        Returns:
            list[Message]: Messages generated by the song command execution.
        """
        command = jingleBellsCommand()
        return command.execute("jingle_bells", player.get_current_room(), player)