from .imports import *
from typing import TYPE_CHECKING, List, Optional, Dict
from .commands import PlantInteractionCommand

if TYPE_CHECKING:
    from coord import Coord
    from maps.base import Map
    from tiles.base import MapObject
    from tiles.map_objects import *


class GridCell(MapObject):
    """
    Represents each interactable single cell of the garden grid
    
    Each grid cell serves as a holder for plants and handles player interactions (placing and removing plants)
    
    Inherits from MapObject 

    """

    def __init__(self, image_name: str, passable: bool, z_index: int) -> None:
        # Call the MapObject constructor with a fixed image name, passable and z_index
        """
        Initializes a grid cell with specific properties

        Parameters:
            image_name (str): background image for this cell
            passable (bool): determines whether entities can move through this cell
            z_index (int): the rendering layer priority for this cell

        """
        print(f"Initializing GridCell with: {image_name}, {passable}, {z_index}")
        super().__init__(f'tile/background/{image_name}', passable, z_index)

    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        Handles player interaction with a grid cell
 
        Parameters:
            player (HumanPlayer): The player interacting with the cell
            
        Returns:
            list[Message]: Messages generated by plant interaction commands
 
        """ 

        command = PlantInteractionCommand()
        result = command.execute('plant_interaction', player.get_current_room(),player)

        return result
    
    def _get_tilemap(self) -> tuple[List[List[MapObject]], int, int]:
        """
        Provides tilemap representation for visual rendering
        
        Returns:
            tuple: A single-cell tilemap representation containing:
                - The 1x1 grid containing just this cell
                - Width (int)
                - Height (int)
        """
        
        return [[self]], 1, 1 #one cell

# we need to treat each grid cell as a separate tile for rendering and other actions
# we can use flyweight design so we don't have to create a new mapobject for every cell 

class GridCellFactory:
    """
    Implements the Flyweight pattern to efficiently manage grid cell instances
    
    Creates a shared pool of cell instances to minimize memory usage when creating large grids. Allows us to not have to create new mapObjects for every cell
    
    """

    _cells: Dict[str, MapObject] = {}

    def __init__(self, image_name: str):
        """
        Initializes the factory with a base image name
        
        Parameters:
            image_name (str): Default image path prefix for created cells
        """
        self.image_name = image_name

    def get_cell(self, cell_type: str) -> Optional[MapObject]:
        """
        Retrieves or creates a shared cell instance of the specified type
        
        Parameter:
            cell_type (str): The image/type of cell to retrieve ('dirt3', 'dirt', etc.)
            
        Returns:
            Optional[MapObject]: The shared cell instance, or None if type is invalid

        """

        if cell_type not in GridCellFactory._cells:
            # Define the properties for each cell type
            cell_info = {
                "dirt3": {
                    "image_name": self.image_name,  # Use the image name passed during initialization
                    "passable": True,
                    "z_index": 0,
                },
                "dirt":{
                    "image_name": self.image_name,  # Use the image name passed during initialization
                    "passable": True,
                    "z_index": 0,
                }

                # Add more cell types here if needed
            }

            if cell_type in cell_info:
                # Create a new MapObject instance for the cell type
                info = cell_info[cell_type]
                GridCellFactory._cells[cell_type] = GridCell(
                    info["image_name"],
                    passable=info["passable"],
                    z_index=info["z_index"],
                )
            else: 
                return None

        # Return the shared instance
        return GridCellFactory._cells.get(cell_type)
        