from .imports import *
from typing import TYPE_CHECKING
from typing import Dict, Optional
from .commands import pickUpPlantCommand

if TYPE_CHECKING:
    from tiles.base import MapObject
    from tiles.map_objects import *

class Plant(MapObject):
    """
    Represents a Plant object 

    Inherits from MapObject and implements plant-specific behaviors including player interaction
    through the Command Design Pattern
    
    Paramters:
        __image (str): The image filename used for this plant's visual representation
    """

    def __init__(self, image: str) -> None:
        """
        Initializes a new Plant 
        
        Parameters:
            image (str): The filename of the image to use for a plant
        """
        super().__init__(image, passable=False, z_index=0)
        self.__image = image
    
    # image is same size for all plants
    def _get_image_size(self) -> tuple[int, int]:
        """
        Gets the size of the plant's image in terms of grid coordinates
        
        Returns:
            (tuple[int, int]): Always returns (1, 1) as all plants use the size of one tile
        """
        return (1,1)
    
    def get_plant_name(self) -> str:
        """
        Gets the plant name from its image filename
        
        Returns:
            (str): The image name with '.png' removed
        """
        return self.__image.replace(".png", "")
    
    # command pattern
    def player_interacted(self, player: HumanPlayer) -> list[Message]:
        """
        When a player interacts with the plant (presses SPACE), it calls a pickup command and
        updates the player's state to reflect they are carrying this plant (Command Design Pattern)
        
        Parameters:
            player (HumanPlayer): The user/player interacting with the plant
            
        Returns:
            (list[Message]): Message generated by executing the pickup command
        """
        command = pickUpPlantCommand()
        plant_name = self.get_plant_name()
        player.set_state('carrying_plant', plant_name)
        return command.execute("pickup_plant", player.get_current_room(), player, plant_name)

#Flyweight
class PlantFactory:
    """
    Flyweight factory: used to create and manage Plant instances
    
    Keeps track of Plant instances to to ensure that each Plant type is only instantiated once, promoting memory efficiency
    
    Parameters:
        _plants (Dict[str, Plant]): Dictionary that stores created Plant instances 
    """

    _plants: Dict[str, Plant] = {}

    @staticmethod
    def get_plant(name: str) -> Optional[Plant]:

        """
        Retrieves or creates a Plant instance 
        
        Parameters:
            name (str): The name of the plant type to retrieve/create (must match one of the predefined plant types)
                        
        Returns:
            Optional[Plant]: The specified plant instance 
        """

        plant_info = {
                "daisy": "daisy.png",
                "lilac": "lilac.png",
                "orchid": "orchid.png",
                "rose": "rose.png",
                "sunflower": "sunflower.png",
                "tulip":  "tulip.png",
                "iris": "iris.png"
            }
        
        if name not in PlantFactory._plants:
            if name in plant_info:
                PlantFactory._plants[name] = Plant(plant_info[name].lower())
            else:
                return None
        return PlantFactory._plants.get(name)
                
