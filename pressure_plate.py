from .imports import *
from typing import TYPE_CHECKING, List
from .grid_manager import GridManager

if TYPE_CHECKING:
    from message import Message, SoundMessage
    from grid_manager import GridManager
    from tiles.map_objects import *

class ColumnPressurePlate(PressurePlate):
    """
    Represents a pressure plate for each column of the garden grid

    Inherits from PressurePlate and implements data from the GridManager to get information about plant locations
    
    Parameters:
        __active (bool): Indicates if the pressure plate is currently active
        column_index (int): The index of the column this pressure plate is associated with
    """
    
    def __init__(self, column_index: int):
        """
        Initializes a new ColumnPressurePlate

        Parameters:
            column_index (int): The index of the column this pressure plate is associated with
        """
        super().__init__(image_name='musicNote', stepping_text='')
        self.__active = False
        self.column_index = column_index

    def player_entered(self, player: HumanPlayer) -> List['SoundMessage']:
        """
        When a player enters the pressure plate it checks if the pressure plate is active and then plays the sound from the top note on column

        Preconditions:
            - The player must be a HumanPlayer
            - The column index must be valid (0-11)

        Postconditions:
            - The sound message is played for the player
            - The pressure plate is set to active

        Parameters:
            player (HumanPlayer): The user/player interacting with the pressure plate

        Returns:
            (list[SoundMessage]): List of sound messages to be played
        """

        messages = []
        
        if not self.__active:
            self.__active = True
            manager = GridManager.get_instance()
            
            #precondition
            assert isinstance(player, HumanPlayer), "Player must be a HumanPlayer"
            assert 0 <= self.column_index < 12, "Column index must be between 0 and 11"
            if not manager:
                return messages
            
            for row in range(4):
                plant_name = manager.notes_grid[row][self.column_index]
                if plant_name and plant_name in GridManager.PLANT_NOTES:
                    note = GridManager.PLANT_NOTES[plant_name]
                    octave = GridManager.ROW_OCTAVES[row]
                    messages.append(SoundMessage(
                        player,
                        f"{note}_{octave}.mp3",
                        volume=1.0,
                        repeat=False
                    ))
        return messages
    
    def player_exited(self, player : HumanPlayer) -> List['Message']:
        """
        When a player exits the pressure plate it sets the active state to False

        Parameters:
            player (HumanPlayer): The user/player interacting with the pressure plate
        
        Preconditions:
            - The player must be a HumanPlayer
        Postconditions:
            - The pressure plate is set to inactive

        Returns:
            (list[Message]): Empty list as no messages are generated
        """
        #precondition
        assert isinstance(player, HumanPlayer), "Player must be a HumanPlayer"
        self.__active = False
        return []
    

class ClearPressurePlate(PressurePlate):
    """
    Represents a pressure plate to clear the entire garden grid (on grid logic and visually)
    Inherits from PressurePlate and implements data from the GridManager to remove all plants
    
    Parameters:
        __active (bool): Indicates if the pressure plate is currently active
    """
    def __init__(self):
        """
        Initializes a new ClearPressurePlate

        Parameters:
            None
        """
        super().__init__(image_name='delete', stepping_text='Cleared all plants from the board')
        self.__active = False
        
    def player_entered(self, player: HumanPlayer) -> List['Message']:
        """
        When a player enters, it checks if the pressure plate is active and then clears all plants from the grid
        Parameters:
            player (HumanPlayer): The user/player interacting with the pressure plate
        Preconditions:
            - The player must be a HumanPlayer
        Postconditions:
            - The pressure plate is set to active
            - All plants are cleared from the grid visually and logically

        Returns:
            (list[Message]): List of messages generated by clearing all plants
        """
        #precondition
        assert isinstance(player, HumanPlayer), "Player must be a HumanPlayer"
        messages = []
        if not self.__active:
            self.__active = True
            manager = GridManager.get_instance()
            
            if not manager:
                return messages
            # clears all plants in grid visually and on logical grid (in grid manager)
            messages.extend(manager.clear_all_plants(player.get_current_room()))
            # display message to player
            messages.append(DialogueMessage(self, player, "Cleared all plants from the board", ""))
        #postcondition
        assert self.__active, "Pressure plate should be active after entering"
        return messages
    
    def player_exited(self, player : HumanPlayer) -> List['Message']:
        """
        When a player exits the pressure plate, it sets the active state to False
        Parameters:
            player (HumanPlayer): The user/player interacting with the pressure plate
        Preconditions:
            - The player must be a HumanPlayer
        Postconditions:
            - The pressure plate is set to inactive
        Returns:
            (list[Message]): Empty list as no messages are generated
        """
        #precondition
        assert isinstance(player, HumanPlayer), "Player must be a HumanPlayer"
        assert self.__active, "Pressure plate should be active before exiting"
        self.__active = False
        #postcondition
        assert not self.__active, "Pressure plate should be inactive after exiting"
        return []